---
// You can add props here if needed in the future
const POSTHOG_KEY = 'phc_va3Z6wbRWbN2n5EIX5M19qSwgtjLfM7WjoSjQfzwOZ2';
const POSTHOG_HOST = 'https://us.i.posthog.com';
const POSTHOG_ASSETS_URL = 'https://us-assets.i.posthog.com/static/array.js';
---

<script is:inline type="text/partytown" define:vars={{ POSTHOG_KEY, POSTHOG_HOST, POSTHOG_ASSETS_URL }}>
// Simple error-resistant PostHog loader
(function() {
  try {
    // Create a safer version of the PostHog object
    window.posthog = window.posthog || {
      _queue: [],
      get: function(property) { return null; },
      init: function(apiKey, options) {
        this._apiKey = apiKey;
        this._options = options;
        this._queue.push(['init', apiKey, options]);
        
        // Load the PostHog script
        var script = document.createElement('script');
        script.src = POSTHOG_ASSETS_URL;
        script.async = true;
        script.onload = function() {
          console.log('PostHog script loaded successfully');
          // Process any queued commands once the script is loaded
          if (window.posthog && window.posthog._queue) {
            window.posthog._queue.forEach(function(args) {
              try {
                if (window.posthog[args[0]]) {
                  window.posthog[args[0]].apply(window.posthog, args.slice(1));
                }
              } catch (e) {
                console.error('Error processing queued PostHog command:', e);
              }
            });
          }
        };
        script.onerror = function() {
          console.error('Failed to load PostHog script');
        };
        
        var firstScript = document.getElementsByTagName('script')[0];
        firstScript.parentNode.insertBefore(script, firstScript);
      },
      capture: function() {
        this._queue.push(['capture'].concat(Array.prototype.slice.call(arguments)));
      },
      identify: function() {
        this._queue.push(['identify'].concat(Array.prototype.slice.call(arguments)));
      }
    };
    
    // Initialize PostHog
    window.posthog.init(POSTHOG_KEY, {
      api_host: POSTHOG_HOST,
      capture_pageview: true,
      loaded: function(posthog) {
        try {
          console.log('PostHog initialized successfully');
          
          // Add page navigation tracking for client-side routing
          document.addEventListener('astro:page-load', function() {
            try {
              if (window.posthog && typeof window.posthog.capture === 'function') {
                window.posthog.capture('$pageview');
                console.log('PostHog: Captured page view on navigation');
              }
            } catch (e) {
              console.error('PostHog page tracking error:', e);
            }
          });
        } catch (e) {
          console.error('PostHog loaded callback error:', e);
        }
      }
    });
    
    // Capture initial page view
    if (window.posthog && typeof window.posthog.capture === 'function') {
      try {
        window.posthog.capture('$pageview');
        console.log('PostHog: Captured initial page view');
      } catch (e) {
        console.error('PostHog initial page view error:', e);
      }
    }
  } catch (e) {
    console.error('PostHog initialization error:', e);
  }
})();
</script> 