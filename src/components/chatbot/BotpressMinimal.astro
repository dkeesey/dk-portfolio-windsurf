---
// BotpressMinimal - Fallback component when Botpress fails to load
---

<!-- Container for the minimal chat UI -->
<div id="minimal-chat-container" class="fixed bottom-5 right-5 w-[380px] max-w-[calc(100vw-20px)] h-[500px] max-h-[75vh] shadow-xl rounded-lg overflow-hidden transition-all duration-300 hidden flex flex-col bg-white">
  <!-- Header -->
  <div class="bg-gradient-to-r from-purple-700 to-blue-600 text-white p-4 flex justify-between items-center">
    <h3 class="text-lg font-medium">Chat with Dean's AI Assistant</h3>
    <button id="minimal-chat-close" class="bg-white/10 backdrop-blur rounded-full p-1 hover:bg-white/20 transition-colors duration-200">
      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>
  
  <!-- Messages -->
  <div id="minimal-chat-messages" class="flex-1 overflow-y-auto p-4 space-y-3">
    <div class="bg-gray-100 rounded-lg p-3 max-w-[85%]">
      <p>ðŸ‘‹ Hi there! I'm Dean's AI assistant. I can help answer questions about Dean's experience, skills, and availability.</p>
    </div>
    
    <div class="bg-gray-100 rounded-lg p-3 max-w-[85%]">
      <p>How can I help you today?</p>
    </div>
  </div>
  
  <!-- Input -->
  <div class="border-t p-3">
    <form id="minimal-chat-form" class="flex gap-2">
      <input 
        type="text" 
        id="minimal-chat-input" 
        class="flex-1 rounded-full px-4 py-2 border focus:outline-none focus:ring-2 focus:ring-blue-500"
        placeholder="Type your message..." 
      />
      <button 
        type="submit" 
        class="bg-blue-600 text-white rounded-full p-2 hover:bg-blue-700 transition-colors"
        id="minimal-chat-send"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </form>
  </div>
</div>

<!-- Toggle button -->
<button id="minimal-chat-toggle" class="fixed bottom-5 right-5 w-14 h-14 rounded-full bg-blue-600 text-white shadow-lg flex items-center justify-center hover:bg-blue-700 transition-all duration-300" style="display: none;">
  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
  </svg>
</button>

<script>
  // Wait for window load event to ensure all elements are available
  window.addEventListener('load', () => {
    // Delay initialization to ensure DOM is fully loaded
    setTimeout(() => {
      try {
        // Get all required elements
        const container = document.getElementById('minimal-chat-container');
        const toggle = document.getElementById('minimal-chat-toggle');
        const close = document.getElementById('minimal-chat-close');
        const form = document.getElementById('minimal-chat-form');
        const input = document.getElementById('minimal-chat-input');
        const messagesContainer = document.getElementById('minimal-chat-messages');
        
        // Check if all elements exist
        if (!container) console.error('minimal-chat-container not found');
        if (!toggle) console.error('minimal-chat-toggle not found');
        if (!close) console.error('minimal-chat-close not found');
        if (!form) console.error('minimal-chat-form not found');
        if (!input) console.error('minimal-chat-input not found');
        if (!messagesContainer) console.error('minimal-chat-messages not found');
        
        if (!container || !toggle || !close || !form || !input || !messagesContainer) {
          console.error('One or more minimal chat elements not found');
          return;
        }
        
        console.log('All minimal chat elements found successfully');
        
        // Show the chat
        function showChat() {
          container.classList.remove('hidden');
          toggle.classList.add('hidden');
        }
        
        // Hide the chat
        function hideChat() {
          container.classList.add('hidden');
          toggle.classList.remove('hidden');
        }
        
        // Send a message
        function sendMessage(text) {
          if (!text.trim()) return;
          
          // Add user message
          const userMessage = document.createElement('div');
          userMessage.className = 'bg-blue-500 text-white rounded-lg p-3 ml-auto max-w-[85%]';
          userMessage.innerHTML = `<p>${text}</p>`;
          messagesContainer.appendChild(userMessage);
          
          // Clear input
          input.value = '';
          
          // Scroll to bottom
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
          
          // Add typing indicator
          const typingIndicator = document.createElement('div');
          typingIndicator.className = 'bg-gray-100 rounded-lg p-3 max-w-[85%] typing-indicator';
          typingIndicator.innerHTML = '<p>Typing...</p>';
          messagesContainer.appendChild(typingIndicator);
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
          
          // Use the API directly
          fetch('/api/chatbot/chat', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              message: text,
              recruiterId: 'guest-' + Date.now(),
              guestMode: true
            })
          })
          .then(response => {
            if (!response.ok) {
              throw new Error('API request failed');
            }
            return response.json();
          })
          .then(data => {
            // Remove typing indicator
            messagesContainer.removeChild(typingIndicator);
            
            // Add assistant message
            const assistantMessage = document.createElement('div');
            assistantMessage.className = 'bg-gray-100 rounded-lg p-3 max-w-[85%]';
            assistantMessage.innerHTML = `<p>${data.message}</p>`;
            messagesContainer.appendChild(assistantMessage);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
          })
          .catch(error => {
            console.error('Error:', error);
            
            // Remove typing indicator
            if (typingIndicator.parentNode === messagesContainer) {
              messagesContainer.removeChild(typingIndicator);
            }
            
            // Add error message
            const errorMessage = document.createElement('div');
            errorMessage.className = 'bg-gray-100 rounded-lg p-3 max-w-[85%]';
            errorMessage.innerHTML = `<p>I'm sorry, I encountered an error processing your message. I'm Dean's AI assistant - I can answer questions about Dean's experience, skills, and availability.</p>`;
            messagesContainer.appendChild(errorMessage);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
          });
        }
        
        // Add event listeners
        toggle.addEventListener('click', showChat);
        close.addEventListener('click', hideChat);
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          sendMessage(input.value);
        });
      } catch (error) {
        console.error('Error initializing minimal chat:', error);
      }
    }, 500); // Delay initialization by 500ms
  });
</script>

<style>
  /* Transitions */
  #minimal-chat-container {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  #minimal-chat-container.hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
  }
  
  #minimal-chat-toggle {
    transition: all 0.3s ease;
  }
  
  #minimal-chat-toggle.hidden {
    opacity: 0;
    transform: scale(0.8);
    pointer-events: none;
  }
  
  .typing-indicator {
    position: relative;
  }
  
  .typing-indicator p {
    display: inline-block;
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0% { opacity: 0.4; }
    50% { opacity: 1; }
    100% { opacity: 0.4; }
  }
</style>
